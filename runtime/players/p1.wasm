%   core "0100"
%   name "Black stupid ants"
%version "1"
%  class "black"

#define food_count  07H
#define enemy_count 06H
#define enemy_pos   21H

;-----------------------------------------------
; return R0 as index the nearest enemy
.GetNearlyEnemy
    ; R0 - the current distance to an enemy
    ; R1 - min distance to an enemy
    ; R2 - index of the nearest enemy
    mov   R0, -1
    mov   RC, [enemy_count]
    ; Если кол-во видимых противников равно нулю, то выходим
    jz    return
    dec   rc
    mov   r1, 7fffh ; max len
    
    ; Цикл поиска ближайшего врага
beg_loop:
    LDEN  RC
    DIST  R0, [enemy_pos] ; в R0 расстояние до противника
    gt    R0, R1
    jt    end_loop
    mov   R1, R0
    mov   R2, RC
end_loop:
    loop  beg_loop
    mov   R0, R2
return:
    exit


.unused_func
    MOV RC, [enemy_count]
    DEC RC
    RET


;-----------------------------------------------
; Main algorithm of the WORKER ant
.Worker
    MOV  R0, 48
    MOV  [R0 + 4], 33
;    MOV  RF, [1 * 2 + 3]
;	AND R0, P0
    MAX P1, P0
    MOV [R0 + 5], [R1 + P0:X * 2 + 10]
    ; Если мы голодны (сытость <= 50.0)
    ; то идем к ближайшей точке с едой
    ; или кушаем из карго
    LE  [2], 500
    jt  go_to_food

    ; Если рядом минимум 2 противника, то атакуем ближайшего
    GE  [enemy_count], 2
    jt  attack_enemy
    jmp finish
go_to_food:
    GT  [food_count], 0
    jt  eat_from_cargo
    LDFD 0
    CTKF [48]
    JMP finish

eat_from_cargo:
    CEAT 2
    JMP  finish

attack_enemy:
    CALL GetNearlyEnemy
    LDEN R0
    CATT [enemy_pos]
    JMP finish
finish:
    RET


;------------------------------
; Main algorithm of the SOLDER ant
.solder
    call   GetNearlyEnemy
    eq    R0, -1
    jt    attack_enemy
    CIDL  2

attack_enemy:
    LDEN R0
    CATT [enemy_pos]
    RET


;------------------------------
; Main algorithm of the SOLDER ant
.queen
    CIDL 2
